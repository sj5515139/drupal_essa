<?php

/**
 * Implements hook_admin_paths()
 */
function student_attendance_admin_paths() {
  $paths = array();
	$session = variable_get('essa_sid');
	$class_list_table = 'essa_'.$session.'_class_list';
	$class_list = array();
  
	$class_list_db = db_query(
		"SELECT class_id,weight from {$class_list_table} order by weight"
	);
  
  foreach($class_list_db as $class){
		$voc = 'class_vocab';//replace this with the taxonomy term
		$vocabulary = taxonomy_vocabulary_machine_name_load($voc);
		$terms = taxonomy_get_tree($vocabulary->vid);
		foreach($terms as $term){
      if($term->name == $class->class_id){
        $secs = taxonomy_get_children($term->tid);
				foreach($secs as $sec){
					$sub_url = array('admin/students/attendance/report/'.$class->class_id.'/'.$sec->name => FALSE);
					$paths = array_merge($paths, $sub_url);
				}
			}
		}
	}
	return $paths;
}

/**
 *Implements hook_permission()
 */
function student_attendance_permission(){
  return array(
    'take_attendance' => array(
      'title' => t('Take Attendance'),
      'description' => t('Warning: Give to Class Teacher roles only.'),
    ),
		'attendance_report' => array(
      'title' => t('access Student Attendance Report'),
      'description' => t('Warning: Give to Class Teacher roles only.'),
    ),
  );
}

/**
 *Implements hook_menu()
 */
function student_attendance_menu(){
  $items = array();
	//admin/students/
	$items['admin/students/attendance'] = array(
		'title' => 'Attendance',
	  'description' => 'Taking student attendance',
    'page callback' => 'drupal_get_form',
	  'page arguments' => array('student_attendance'),
    'access arguments' => array('take_attendance'),
		'weight' => 3,
	);
	
  $items['admin/students/attendance/today-attendance'] = array(
		'title' => 'Today\'s Attendance',
	  'description' => 'Taking student attendance',
    'page callback' => 'drupal_get_form',
	  'page arguments' => array('today_student_attendance'),
    'file' => 'student_attendance.admin.inc',
    'file path' => drupal_get_path('module','student_attendance').'/includes',
	  'access arguments' => array('take_attendance'),
		'weight' => 8,
	);
  
  $items['admin/students/attendance/past_attendance'] = array(
		'title' => 'Past Attendance',
	  'description' => 'Taking student attendance',
    'page callback' => 'drupal_get_form',
	  'page arguments' => array('past_student_attendance'),
    'file' => 'past_student_attendance.admin.inc',
    'file path' => drupal_get_path('module','student_attendance').'/includes',
	  'access arguments' => array('take_attendance'),
		'weight' => 9,
	);
	
	$items['admin/students/attendance/report'] = array(
		'title' => 'Report',
	  'description' => 'Student Attendance Report',
    'page callback' => 'drupal_get_form',
	  'page arguments' => array('student_attendance_report_main'),
		'access arguments' => array('attendance_report'),
		'weight' => 10,
	);
	
	$session = variable_get('essa_sid');
	$class_list_table = 'essa_'.$session.'_class_list';
	$class_list = array();
  $class_list_db = db_query(
		"SELECT class_id,weight from {$class_list_table} order by weight"
	);
  foreach($class_list_db as $class){
		$items['admin/students/attendance/report/'.$class->class_id] = array(
      'title' => $class->class_id,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('student_attendance_report_sec', 4),
      'access arguments' => array('administer student'),
      'weight' => $class->weight,
    );
		$voc = 'class_vocab';//replace this with the taxonomy term
		$vocabulary = taxonomy_vocabulary_machine_name_load($voc);
		$terms = taxonomy_get_tree($vocabulary->vid);
		foreach($terms as $term){
      if($term->name == $class->class_id){
        $secs = taxonomy_get_children($term->tid);
				foreach($secs as $sec){
					$items['admin/students/attendance/report/'.$class->class_id.'/'.$sec->name] = array(
						'title' => $sec->name,
					  'page callback' => 'drupal_get_form',
						'page arguments' => array('student_attendance_report_form', 4,5),
						'access callback' => TRUE,
						'weight' => $class->weight,
						'file path' => drupal_get_path('module','student_attendance').'/includes',
						'file' => 'student_attendance_report.admin.inc',
					);
				}
		  }
		}
  }
	
	$items['att_adm_no/autocomplete'] = array(
    'description' => t('A callback for teacher autocomplete in subjects form'),
    'page callback' => 'att_adm_no_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function att_adm_no_autocomplete($string = ''){
	$session = variable_get('essa_sid');
	$matches = array();
	$student_table = 'essa_'.$session.'_master_student_table';
	$students =  db_query(
		"SELECT * from {$student_table} WHERE status = 1"
	);
	foreach($students as $student){
		$autocomplete_string[] = $student->adm_no;
	}
	
	foreach($autocomplete_string as $phrases){
		if(stristr($phrases, $string)){
			$matches[$phrases] = $phrases;
		}
	}
	drupal_json_output($matches);
}

function student_attendance_report_main($form, &$form_state){
	$form = array();
	$form = array();
	global $user;
	$flag = 0;
	
	$session = variable_get('essa_sid');
	$class_table = 'essa_'.$session.'_class_list';
	$mst_table = 'essa_'.$session.'_master_staff_table';
	$ct_table = 'essa_'.$session.'_class_teacher';
	$staff_detail = db_query(
		"SELECT * from {$mst_table} where uid = :uid;", array(':uid' => $user->uid)
	);
	foreach($staff_detail as $sd){
		$class_teacher = db_query(
			"SELECT * from {$ct_table} where teacher_nickname = :nn;", array(':nn' => $sd->nickname)
		);
		foreach($class_teacher as $ct){
			$flag = 1;
			$class = $ct->class;
			$sec = $ct->section;
		}
	}
	if($flag == 1){
		$path = url('/admin/students/attendance/report/'.$class.'/'.$sec, array('absolute' => TRUE));
		
		drupal_goto($path);
		overlay_set_mode('none');
	}else{
		$session = variable_get('essa_sid');
		$class_table = 'essa_'.$session.'_class_list';
		$class_db = db_query(
			"SELECT * from {$class_table} order by weight"
		);
		foreach($class_db as $c){
			$row[$c->class_id] = array(
		    '#tree' =>TRUE,
						
      $c->class_id => array(  //Generating unique array id for every form element
					'c1' =>array(
		        '#type' => 'markup',
						'#markup' => l(t($c->class_id), 'admin/students/attendance/report/'.$c->class_id),
		      ),
		    ),
		  );
		}
		
		$form['classes'] = array(
		  '#theme' => 'main_ops_theme_table',
		  'rows' => $row,
		);
		return $form;
	}
}

/**
 *Implements page callback function - student_attendance
 */
function student_attendance($form, &$form_state){
	global $base_url;
	$url1 = $base_url.'/admin/students/attendance/today-attendance';
	$url2 = $base_url.'/admin/students/attendance/past_attendance';
	$url3 = $base_url.'/admin/students/attendance/report';
	$form['msg'] = array(
		'#type' => 'markup',
		'#markup' => '<li><a href = "'.$url1.'">'."Today's".' Attendance</a></li>Click to take '."today's".' attendance.
									<li><a href = "'.$url2.'">Past Attendance</a></li>Click to take past attendance.
									<li><a href = "'.$url3.'">Attendance Report</a></li>Click to see attendance report.',
	);
	return $form;
}

/**
 *Implements page callback function - timetable_main
 */
function student_attendance_report_sec($form, &$form_state, $class){
	$form = array();
	$session = variable_get('essa_sid');
	$class_table = 'essa_'.$session.'_class_list';
	$class_db = db_query(
		"SELECT * from {$class_table} where class_id = :id", array(':id' => $class)
	);
	foreach($class_db as $c){
		$form['back'] = array(
			'#type' => 'markup',
			'#markup' => '<p class = "back_button">'.l(t('Back'), 'admin/students/attendance/report/').'</p>',
		);
		switch($c->no_of_sec){
			case 1:
				$sections = array('A');
				foreach($sections as $sec){
					$row[$c->class_id.$sec] = array(
						'#tree' =>TRUE,
					
						$c->class_id.$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
					    ),
					  ),
					);	
				}
				break;
			case 2:
				$sections = array('A', 'B');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
						
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
							  '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
						  ),
					  ),
					);	
				}
				break;
			case 3:
				$sections = array('A','B','C');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
					
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
					    ),
					  ),
					);	
				}
				break;
			case 4:
				$sections = array('A','B','C','D');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
					
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
					    ),
						),
					);	
				}
				break;
			case 5:
				$sections = array('A','B','C','D','E');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
					
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
						  ),
						),
					);	
				}
				break;
			case 6:
				$sections = array('A','B','C','D','E','F');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
					
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
						  ),
						),
					);	
				}
				break;
			case 7:
				$sections = array('A','B','C','D','E','F','G');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
					
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
						  ),
						),
					);	
				}
				break;
			case 8:
				$sections = array('A','B','C','D','E','F','G','H');
				foreach($sections as $sec){
					$row[$sec] = array(
						'#tree' =>TRUE,
					
						$sec => array(  //Generating unique array id for every form element
							'c1' =>array(
						    '#type' => 'markup',
								'#markup' => l(t($sec), 'admin/students/attendance/report/'.$c->class_id.'/'.$sec),
						  ),
						),
					);	
				}
				break;
		}
	}
	
	$form['sections'] = array(
	  '#theme' => 'class_sec_theme_table',
		'rows' => $row,
	);
	
	return $form;
}

/**
 *Calling the theme function for the form - hook_theme().
 */
function student_attendance_theme() {
  return array(
    'attendance_table' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
    'past_attendance_table' => array(
      // The renderable element is the form.
      'render element' => 'form',
    ),
  );
}

//*******Suraj*******//

/**
 *Implementing hook_cron function().
 */

function student_attendance_cron(){
	$session = variable_get('essa_sid');
	$staff_table = 'essa_'.$session.'_master_staff_table';
	$class_teacher_table = 'essa_'.$session.'_class_teacher';
	$notification_table = 'essa_'.$session.'_notifications';
	$class_table = 'essa_'.$session.'_class_section';
	$sys_alert_table = 'essa_'.$session.'_system_alert';
	$class_teacher_table = 'essa_'.$session.'_class_teacher';
	$class_list = db_query("SELECT * FROM {$class_table}");
	$cl = array();
	$cls = array();
	$class_list1 = array();
	foreach($class_list as $c){
		//dsm($class->sections);
		$cl[] = $c->sections;
	}
	foreach($cl as $cls){
		//dsm($cls);
		$attend_table = 'essa_'.$session.'_'.strtolower($cls).'_attendance';
		$attend_class = db_query("SELECT * FROM {$attend_table}");
		foreach($attend_class as $at_cal){
			$today_date = date('Y_m_d');
			$date = $at_cal->$today_date;
			//dsm($at_cal);
			if($date == NULL){
				$class_list1[] = $cls;
			}
		}
	}
	foreach($class_list1 as $cl1){
		$class_sec = explode('_',$cl1);
		//dsm($class_sec);
		$class_teacher = db_query("SELECT * FROM {$class_teacher_table} WHERE class =:class AND section = :sec;", array(':class' => $class_sec[0], ':sec' => $class_sec[1]));
		foreach($class_teacher as $ct1){
			//dsm($ct1->teacher_nickname);
			$staff_db1 = db_query("SELECT * FROM {$staff_table} WHERE nickname = :nn ;",array(':nn' =>$ct1->teacher_nickname));
			foreach($staff_db1 as $sd){
				//dsm($sd->emp_id);
				//dsm($sd->uid);
				//dsm($cl1);
				$emp_name1 = $sd->fname.' '.$sd->lname.'('.$sd->nickname.')';
				if(date('H_i_s') > '16_00_00'){
					$today_date = date('Y_m_d');
					$created_date = date("Y-m-d H:i:s");
					$strtodate = strtotime($created_date);
					
					//Sending notification to class tecaher
					db_insert($notification_table)
					->fields(array(
						'uid' => $sd->uid,
						'message' => 'Attendence for class '.$cl1.' was not taken on '.$today_date.'.',
						'status' => '0',
						'module' => 'students',
						'source_url' => 'admin/students/attendance/today-attendance',
						'destination_url' => 'admin/students/attendance/today-attendance',
						'timestamp' => $strtodate,
					))
					->execute();
					
					$r_id = db_query("SELECT * FROM {role} WHERE name = :name OR name = :name1", array(':name' => 'Principal', ':name1' => 'Time Table Incharge'));
					foreach($r_id as $rid){
						$u_id = db_query("SELECT * FROM {users_roles} WHERE rid = :rid;", array(':rid' => $rid->rid));
						foreach($u_id as $u){
							//Sending notification to principal and time table incharge
							db_insert($notification_table)
							->fields(array(
								'uid' => $u->uid,
								'rid' => $u->rid,
								'message' => 'Attendence for class '.$cl1.' was entered by '.$sd->emp_id.' - '.$emp_name1.' was not taken on '.$today_date.'.',
								'status' => '0',
								'module' => 'students',
								'source_url' => 'admin/students/attendance/today-attendance',
								'destination_url' => 'admin/students/attendance/report/'.$class_sec[0].'/'.$class_sec[1],
								'timestamp' => $strtodate,
							))
							->execute();
						}
					}
					
					//sending system alert
					$created_date = date("Y-m-d H:i:s");
					$strtodate = strtotime($created_date);
					db_insert($sys_alert_table)
					->fields(array(
						'message' => 'Attendance for class '.$cl1.' was taken by '.$sd->emp_id.' - '.$emp_name1.' was not taken on '.$today_date.'.',
						'priority' => 'L',
						'module' => 'students',
						'source_url' => 'admin/students/attendance/today-attendance',
						'timestamp' => $strtodate,
					))
					->execute();
					
				}
			}
		}
	}
}


/**
 *Supporting function to get a date range between two dates.
 */
function getDatesFromRange_student($start, $end, $format) {
  $array = array();
  $interval = new DateInterval('P1D');
  $realEnd = new DateTime($end);
  $realEnd->add($interval);
  $period = new DatePeriod(new DateTime($start), $interval, $realEnd);
  foreach($period as $date) { 
    $array[] = $date->format($format); 
  }
  return $array;
}